{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ffmpeg-media-type","text":"<p><code>ffmpeg-media-type</code> is a Python library that utilizes FFmpeg to detect various media file information, such as duration, width, and height. This library provides an easy-to-use interface for extracting essential details from media files by leveraging the powerful capabilities of FFmpeg.</p> <p> </p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Documentation</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install <code>ffmpeg-media-type</code> via pip:</p> <pre><code>pip install ffmpeg-media-type\n</code></pre> <p>Note: FFmpeg must be installed on your system for this library to function correctly. Make sure you have FFmpeg installed and added to your system's PATH.</p>"},{"location":"#usage","title":"Usage","text":"<p>To use <code>ffmpeg-media-type</code>, first import the library:</p> <pre><code>import ffmpeg_media_type\n</code></pre>"},{"location":"#detecting-media-file-information","title":"Detecting Media File Information","text":"<p>To detect media file information, use the <code>detect</code> function, providing the path to the media file as a parameter:</p> <pre><code>media_info = ffmpeg_media_type.detect('https://raw.githubusercontent.com/livingbio/ffmpeg-media-type/main/docs/media/overlay.png')\nmedia_info\n</code></pre> <pre><code>MediaInfo(type='image', width=163, height=117, duration=None, format='png_pipe', size=2212, suggest_ext='png')\n</code></pre> <p>The <code>detect</code> function returns a model containing the following information:</p> <ul> <li><code>type</code>: The type of media file (e.g. <code>video</code>, <code>audio</code>, <code>image</code>, etc.).</li> <li><code>duration</code>: The duration of the media file in seconds.</li> <li><code>width</code>: The width of the media file in pixels.</li> <li><code>height</code>: The height of the media file in pixels.</li> <li><code>format</code>: The format of the media file (e.g. <code>mp4</code>, <code>mp3</code>, <code>png</code>, etc.).</li> <li><code>size</code>: The size of the media file in bytes.</li> <li><code>suggest_ext</code>: The suggested file extension for the media file (e.g. <code>mp4</code>, <code>mp3</code>, <code>png</code>, etc.).</li> </ul> <p>Here's an example of how to access these details:</p> <pre><code>duration = media_info.duration\nwidth = media_info.width\nheight = media_info.height\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>import ffmpeg_media_type\n\n# Specify the path to the media file\nfile_path = 'https://raw.githubusercontent.com/livingbio/ffmpeg-media-type/main/docs/media/SampleVideo_1280x720_1mb.mp4'\n\n# Detect media file information\nmedia_info = ffmpeg_media_type.detect(file_path)\n\n# Extract information from the media_info dictionary\nduration = media_info.duration\nwidth = media_info.width\nheight = media_info.height\n\n# Print the extracted information\nprint(f\"Duration: {duration} seconds\")\nprint(f\"Width: {width} pixels\")\nprint(f\"Height: {height} pixels\")\n</code></pre> <pre><code>Duration: 5.312 seconds\nWidth: 1280 pixels\nHeight: 720 pixels\n</code></pre>"},{"location":"#enhancing-accuracy-in-guessing-media-file-extensions-with-ffmpeg","title":"Enhancing Accuracy in Guessing Media File Extensions with FFmpeg","text":"<ul> <li>Typically, the media file's extension is utilized to determine its file type. Nevertheless, this approach may not always yield accurate results. For instance, a file bearing the <code>.mp4</code> extension could, in reality, be an audio file.</li> <li>The <code>ffmpeg-media-type</code> tool enhances the precision of media file extension guessing by leveraging the built-in format functionality of FFmpeg through the command <code>ffmpeg -formats</code>.</li> </ul> <p>check cache for details.</p>"},{"location":"#access-ffprobe-output","title":"Access ffprobe output","text":"<p>If you need to access the raw ffprobe output, you can use the <code>ffprobe</code> function:</p> <pre><code>ffprobe_output = ffmpeg_media_type.ffprobe('https://raw.githubusercontent.com/livingbio/ffmpeg-media-type/main/docs/media/SampleVideo_1280x720_1mb.mp4')\n\nffprobe_output\n</code></pre> <pre><code>FFProbeInfo(format=FFProbeFormat(filename='https://raw.githubusercontent.com/livingbio/ffmpeg-media-type/main/docs/media/SampleVideo_1280x720_1mb.mp4', duration='5.312000', format_name='mov,mp4,m4a,3gp,3g2,mj2', format_long_name='QuickTime / MOV', start_time='0.000000', size='1055736', probe_score=100), streams=(FFProbeStream(index=0, width=1280, height=720, codec_type='video', codec_name='h264', codec_long_name='H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10', profile='Main', pix_fmt='yuv420p', r_frame_rate='25/1', tags=FFProbeStreamTags(rotate=0)), FFProbeStream(index=1, width=None, height=None, codec_type='audio', codec_name='aac', codec_long_name='AAC (Advanced Audio Coding)', profile='LC', pix_fmt=None, r_frame_rate='0/0', tags=FFProbeStreamTags(rotate=0))))\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! If you encounter any issues or have suggestions for improvements, please open an issue on the GitHub repository. If you would like to contribute code, please fork the repository and submit a pull request.</p> <p>Before submitting a pull request, make sure to run the tests using the following command:</p> <pre><code>poetry install --with dev\npy.test src\n</code></pre> <p>Please ensure that your code follows the established coding style and passes all tests.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for more information.</p>"},{"location":"ffmpeg_media_type/","title":"ffmpeg_media_type","text":""},{"location":"ffmpeg_media_type/#ffmpeg_media_type","title":"ffmpeg_media_type","text":""},{"location":"ffmpeg_media_type/#ffmpeg_media_type.FFProbeInfo","title":"FFProbeInfo  <code>dataclass</code>","text":"<pre><code>FFProbeInfo(\n    *,\n    format: FFProbeFormat,\n    streams: tuple[FFProbeStream, ...]\n)\n</code></pre> <p>The media information return by ffprobe.</p>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.FFProbeInfo.format","title":"format  <code>instance-attribute</code>","text":"<pre><code>format: FFProbeFormat\n</code></pre> <p>The media format info.</p>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.FFProbeInfo.streams","title":"streams  <code>instance-attribute</code>","text":"<pre><code>streams: tuple[FFProbeStream, ...]\n</code></pre> <p>The media streams info.</p>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.MediaInfo","title":"MediaInfo  <code>dataclass</code>","text":"<pre><code>MediaInfo(\n    *,\n    type: Literal[\"image\", \"video\", \"audio\"],\n    width: int = 0,\n    height: int = 0,\n    duration: float = 0,\n    format: str | None = None,\n    size: int = 0,\n    suggest_ext: str | None = None\n)\n</code></pre> <p>The Basic Media info.</p>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.MediaInfo.duration","title":"duration  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>duration: float = 0\n</code></pre> <p>The media duration.</p>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.MediaInfo.format","title":"format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>format: str | None = None\n</code></pre> <p>The media format.</p>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.MediaInfo.height","title":"height  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>height: int = 0\n</code></pre> <p>The media height.</p>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.MediaInfo.size","title":"size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>size: int = 0\n</code></pre> <p>The media size.</p>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.MediaInfo.suggest_ext","title":"suggest_ext  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>suggest_ext: str | None = None\n</code></pre> <p>The suggested file extension.</p>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.MediaInfo.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: Literal['image', 'video', 'audio']\n</code></pre> <p>The media type.</p>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.MediaInfo.width","title":"width  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>width: int = 0\n</code></pre> <p>The media width.</p>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.detect","title":"detect","text":"<pre><code>detect(uri: str | Path) -&gt; MediaInfo\n</code></pre> <p>Detect the media type of a file.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str | Path</code> <p>the URI of the file</p> required <p>Returns:</p> Type Description <code>MediaInfo</code> <p>the media type information</p> <p>Raises:</p> Type Description <code>FFmpegMediaTypeError</code> <p>If the ffmpeg command fails.</p> <code>FFMpegMediaCorruptedError</code> <p>If the media file is corrupted.</p> Source code in <code>src/ffmpeg_media_type/info.py</code> <pre><code>def detect(uri: str | Path) -&gt; MediaInfo:\n    \"\"\"\n    Detect the media type of a file.\n\n    Args:\n        uri: the URI of the file\n\n    Returns:\n        the media type information\n\n    Raises:\n        FFmpegMediaTypeError: If the ffmpeg command fails.\n        FFMpegMediaCorruptedError: If the media file is corrupted.\n    \"\"\"\n    uri = str(uri)\n    info = ffprobe(uri)\n    current_ext = extract_file_extension_from_uri(uri)\n\n    format_name = info.format.format_name\n    duration = info.format.duration\n\n    # NOTE: handle ffmpeg's image compatibility\n    if format_name == \"image2\":\n        if not info.streams[0].codec_name:\n            raise FFMpegMediaCorruptedError(f\"Corrupted image file {uri}\")\n        format_name = info.streams[0].codec_name\n\n    # NOTE: detect file extension\n    if format_name in KNOWN_CODEC_EXTS:\n        common_exts = KNOWN_CODEC_EXTS[format_name]\n    elif support_info := load(FFMpegSupport, format_name):\n        common_exts = support_info.common_exts\n    else:\n        common_exts = ()\n\n    if current_ext in common_exts:\n        suggest_ext = current_ext\n    elif common_exts:\n        suggest_ext = common_exts[0]\n    else:\n        suggest_ext = None\n\n    # NOTE: we classify gif and mjpeg as imageg\n    if not duration or format_name in (\"gif\", \"mjpeg\"):\n        if not (info.streams[0].width and info.streams[0].height):\n            raise FFMpegMediaCorruptedError(f\"Corrupted image file {uri}\")\n\n        return MediaInfo(\n            type=\"image\",\n            width=info.streams[0].width or 0,\n            height=info.streams[0].height or 0,\n            duration=float(duration) if duration is not None else 0,\n            format=format_name,\n            size=int(info.format.size) if info.format.size is not None else 0,\n            suggest_ext=suggest_ext,\n        )\n\n    for stream in info.streams:\n        # NOTE: if there is at least one video stream, the media is video\n        if stream.codec_type == \"video\" and format_name not in (\"mp3\",):\n            width = stream.width\n            height = stream.height\n\n            if not (width and height):\n                raise FFMpegMediaCorruptedError(f\"Corrupted image file {uri}\")\n\n            return MediaInfo(\n                type=\"video\",\n                width=width or 0,\n                height=height or 0,\n                duration=float(duration) if duration is not None else 0,\n                format=format_name,\n                size=int(info.format.size) if info.format.size is not None else 0,\n                suggest_ext=suggest_ext,\n            )\n\n    # NOTE: if there is no video stream, the media is audio\n    return MediaInfo(\n        type=\"audio\",\n        width=0,\n        height=0,\n        duration=float(duration) if duration is not None else 0,\n        format=format_name,\n        size=int(info.format.size) if info.format.size is not None else 0,\n        suggest_ext=suggest_ext,\n    )\n</code></pre>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.ffprobe","title":"ffprobe","text":"<pre><code>ffprobe(input_url: str | Path) -&gt; FFProbeInfo\n</code></pre> <p>Get media information using FFprobe.</p> <p>Parameters:</p> Name Type Description Default <code>input_url</code> <code>str | Path</code> <p>the URI of the media file</p> required <p>Returns:</p> Type Description <code>FFProbeInfo</code> <p>the media information</p> <p>Raises:</p> Type Description <code>FFmpegMediaTypeError</code> <p>If the FFprobe command fails.</p> Source code in <code>src/ffmpeg_media_type/utils/ffprobe.py</code> <pre><code>def ffprobe(input_url: str | Path) -&gt; FFProbeInfo:\n    \"\"\"\n    Get media information using FFprobe.\n\n    Args:\n        input_url: the URI of the media file\n\n    Returns:\n        the media information\n\n    Raises:\n        FFmpegMediaTypeError: If the FFprobe command fails.\n    \"\"\"\n\n    input_url = hotfix_animate_webp(input_url)\n\n    # Construct the FFprobe command with JSON output format\n    ffprobe_cmd = [\"ffprobe\"] + [\n        \"-v\",\n        \"error\",\n        \"-show_format\",\n        \"-show_streams\",\n        \"-of\",\n        \"json\",\n        str(input_url),\n    ]\n\n    # Execute the FFprobe command and capture the output\n    output = call(ffprobe_cmd)\n    probe_info = from_dict(FFProbeInfo, json.loads(output))\n\n    return probe_info\n</code></pre>"},{"location":"ffmpeg_media_type/#ffmpeg_media_type.generate_thumbnail","title":"generate_thumbnail","text":"<pre><code>generate_thumbnail(\n    video_path: str | Path,\n    suffix: str = \".png\",\n    *,\n    width: int = 320,\n    height: int = -1,\n    time_offset: float = 0\n) -&gt; str\n</code></pre> <p>Generate a thumbnail from a video file at a specified time offset.</p> <p>Parameters:</p> Name Type Description Default <code>video_path</code> <code>str | Path</code> <p>the path to the video file</p> required <code>suffix</code> <code>str</code> <p>the suffix of the generated thumbnail</p> <code>'.png'</code> <code>width</code> <code>int</code> <p>the width of the generated thumbnail</p> <code>320</code> <code>height</code> <code>int</code> <p>the height of the generated thumbnail</p> <code>-1</code> <code>time_offset</code> <code>float</code> <p>the time offset in seconds to generate the thumbnail</p> <code>0</code> <p>Raises:</p> Type Description <code>FFmpegMediaTypeError</code> <p>If the ffmpeg command fails.</p> <p>Returns:</p> Type Description <code>str</code> <p>the path to the generated thumbnail</p> Source code in <code>src/ffmpeg_media_type/utils/thumbnail.py</code> <pre><code>def generate_thumbnail(\n    video_path: str | Path,\n    suffix: str = \".png\",\n    *,\n    width: int = 320,\n    height: int = -1,\n    time_offset: float = 0,\n) -&gt; str:\n    \"\"\"\n    Generate a thumbnail from a video file at a specified time offset.\n\n    Args:\n        video_path: the path to the video file\n        suffix: the suffix of the generated thumbnail\n        width: the width of the generated thumbnail\n        height: the height of the generated thumbnail\n        time_offset: the time offset in seconds to generate the thumbnail\n\n    Raises:\n        FFmpegMediaTypeError: If the ffmpeg command fails.\n\n    Returns:\n        the path to the generated thumbnail\n    \"\"\"\n\n    video_path = hotfix_animate_webp(video_path)\n\n    thumbnail_path = create_temp_filename(suffix)\n    ffmpeg_cmd = [\"ffmpeg\"] + [\n        \"-y\",  # Overwrite output file if it exists\n        \"-i\",\n        str(video_path),  # Input video path\n        \"-ss\",\n        str(time_offset),  # Time offset (seek to the specified position)\n        \"-vframes\",\n        \"1\",  # Number of frames to output\n        \"-vf\",\n        f\"scale={width}:{height}\",  # Thumbnail size (width: 320, height: proportional)\n        \"-q:v\",\n        \"2\",  # Quality (2 - high, 5 - low)\n        thumbnail_path,  # Output thumbnail path\n    ]\n\n    call(ffmpeg_cmd)\n\n    return thumbnail_path\n</code></pre>"}]}